package algorithm;

import java.awt.Button;
import java.awt.Color;
import java.awt.Font;
import java.awt.Label;
import java.awt.TextArea;
import java.awt.TextField;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JPanel;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

//使用JFrame实现可视化
@SuppressWarnings("serial")
public class ACTG extends JFrame {
	private Label L1 =new Label("请输入含有这四种'A','G','C','T'字母的基因序列");
	private Label L2 =new Label("X序列：");
	private TextField x=new TextField(50);
	private Label L4 =new Label();
	private Label L3 =new Label("Y序列：");
	private TextField y=new TextField(50);
	private Label L5 =new Label();
	private Label L7=new Label("过程：");
	private TextArea ta = new TextArea(10, 40);
	private Label similar =new Label("相似度：");
	private Label Match_results = new Label("匹配结果：");
	private Label L6 =new Label();
	private Button define=new Button("确定");
	private Button reset=new Button("重置");
	private JPanel p=new JPanel(); //设置面板
	
	public ACTG() {
		p.setBackground(new java.awt.Color(255,235,205));//设置背景颜色
		p.setForeground(new java.awt.Color(70,130,180));//设置字体颜色
		p.setFont(new   Font("宋体",Font.BOLD,18));
		//添加文本，文本框及按钮
		p.add(L1);
		p.add(L2);
		p.add(x);
		p.add(L4);
		p.add(L3);
		p.add(y);
		p.add(L5);
		p.add(L7);
		p.add(ta);
		p.add(similar);
		p.add(Match_results);
		p.add(L6);
		p.add(define);
		p.add(reset);
		
		p.setLayout(null);// 设置空布局，即绝对布局
		L1.setBounds(70,18,500,30);//设置位置大小
		L1.setForeground(Color.red);
		L2.setBounds(80,50,60,30);
		x.setBounds(160,50,300,30);
		L4.setBounds(100,80,500,30);//空白处
		L3.setBounds(80,110,60,30);
		y.setBounds(160,110,300,30);
		L5.setBounds(100,140,500,30);//空白处
		L7.setBounds(80,170,300,30);
		ta.setBounds(160,200,300,200);
		ta.setEditable(false);
		similar.setBounds(80,420,300,30);
		Match_results.setBounds(80,450,300,30);//匹配结果展示1
		L6.setBounds(183,480,300,30);//匹配结果展示2
		define.setBounds(160, 525, 60, 40);
		reset.setBounds(280, 525, 60, 40);
		//确认获取输入框的内容
		define.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				String j1=x.getText();
				String j2=y.getText();
				if(j1.length()==0&&j2.length()==0) {
					return;
				}
				if(check(j1)&&check(j2)) {
					ACGTCompare c = null;
					try {
						c = new ACGTCompare(j1,j2);
					} catch (IOException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
					BufferedReader buf=null;
					try {
						String s="G:\\\\学院\\\\理工\\\\2019.下\\\\算法课程设计\\\\源码\\\\ACTG_Array.txt";
						buf=new BufferedReader(new FileReader(s));
						String line =null;//一行数据
						 //逐行读取
						while((line=buf.readLine())!=null) {
								ta.append(System.lineSeparator()+line);
						}
							buf.close();//关闭数据流
					}catch (IOException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}					
                /*
                 * 当ta为JTextArea时
                 * 设置自动换行,自动换行则不会出现横向的滚动条
                 * ta.setLineWrap(true);
                 */
					similar.setText("相似度："+(c.getResult()==0?0:c.getResult()));
					Match_results.setText("匹配结果："+c.s1);
					L6.setText(c.Ns2);
				}else {}
			}			
		});
		//重置输入框及输出部分的内容
		reset.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				x.setText("");
				y.setText("");
				ta.setText("");
				similar.setText("相似度：");
				Match_results.setText("匹配结果：");
				L6.setText("");
			}			
		});
		this.add(p);
		this.setSize(550,650);
		this.setVisible(true);
	    this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);//使用 System exit 方法退出应用程序。仅在应用程序中使用。
	    this.setTitle("基因序列比较");
	}
	//布尔型
	public static boolean check(String string) {
		List<String> li=new ArrayList<String>();
		//将这四种字母加入数组中
		li.add("A");
		li.add("C");
		li.add("G");
		li.add("T");
		for(int i = 0;i < string.length();i++) {
			String s = string.charAt(i)+"";
			if(!li.contains(s)) {//contains()判断字符串中是否有子字符串
				return false;
			}
		}		
		return true;
	}
	public static void main(String[] args) throws IOException {			
			//用作测试题目所给的序列，验证是否测试正确
//			String X="AGTGATG";
//			String Y="GTTAG";
//			ACGTCompare c=new ACGTCompare(X,Y);
//			System.out.println(c.getResult());
//			System.out.println(c.Ns1);
//			System.out.println(c.Ns2);
			new ACTG();
		}	
}
     //序列比较
     class ACGTCompare{
    	 String s1;
    	 String s2;
    	 public int[][] arrayTable;
    	 public String Ns1;//变更后的x序列
    	 public String Ns2;//变更后的y序列
    	 
    	 public ACGTCompare(String s1,String s2) throws IOException {
    		 this.s1=s1;
    		 this.s2=s2;
    		 arrayTable=new int[s1.length()+1][s2.length()+1];
    		 Fill_Table();
    		 getS();   //变更后的s1和s2		 
    	 }
    	 //检查序列字符串格式是否正确
    	 public static boolean IsRight_s(String string) {
    		 for(int i=0;i<string.length();i++) {
    			 if(string.substring(i,i+1)!="A"&&
    					 string.substring(i,i+1)!="C"&&
    					 string.substring(i,i+1)!="G"&&
    					 string.substring(i,i+1)!="T") {
    				 return false;
    			 }
    		 }
    		 return true;
    	 }
    	 //两个序列比较得到的分值（可含有空格“_”）
    	 public static int getTable(String s1,String s2) {
    		 if(s1.equals(s2)) 
    			 return 5;
    	     else if ((s1.equals("A") && s2.equals("C")) || (s1.equals("C") && s2.equals("A")))//A
    	                return -1;
    	     else if ((s1.equals("A") && s2.equals("G")) || (s1.equals("G") && s2.equals("A")))
    	                return -2;
    	     else if ((s1.equals("A") && s2.equals("T")) || (s1.equals("T") && s2.equals("A")))
    	                return -1;
    	     else if ((s1.equals("A") && s2.equals("_")) ||(s1.equals("_") && s2.equals("A")))
    	                return -3;
    	     else if ((s1.equals("C") && s2.equals("G")) || (s1.equals("G") && s2.equals("C")))//C
    	                return -3;
    	     else if ((s1.equals("C") && s2.equals("T")) || (s1.equals("T") && s2.equals("C")))
    	                return -2;
    	     else if ((s1.equals("C") && s2.equals("_")) || (s1.equals("_") && s2.equals("C")))
    	                return -4;
    	     else if ((s1.equals("G") && s2.equals("T")) || (s1.equals("T") && s2.equals("G")))//G
    	                return -2;
    	     else if ((s1.equals("G") && s2.equals("_")) || (s1.equals("_") && s2.equals("G")))
    	                return -2;
    	     else if ((s1.equals("T") && s2.equals("_")) || (s1.equals("_") && s2.equals("T")))//T
    	                return -1;
    	     return 0;
    		 }
    	 //填充arrayTable
    	 public void Fill_Table() throws IOException {
    		 for (int i=1;i<arrayTable.length;i++) 
    			 arrayTable[i][0]=arrayTable[i-1][0]+getTable(s1.substring(i-1, i), "_");
    		 for (int i = 1; i < arrayTable[0].length; i++)
                 arrayTable[0][i] = arrayTable[0][i - 1] +  getTable("_", s2.substring(i - 1, i));
             for (int i = 1; i < arrayTable.length; i++)
             {
                 for (int j = 1; j < arrayTable[0].length; j++)
                 {//使用V1,V2,V3存储三种情况，即当前位置分值来自顶部、左边、对角线
                     int v1 = 0, v2 = 0, v3 = 0;
                     //情况1：s1和"_"搭配
                     v1 = arrayTable[i - 1][j] + getTable(s1.substring(i - 1, i), "_");                   
                     //情况2：s1和s2搭配
                     v2 = arrayTable[i - 1][j - 1] + getTable(s1.substring(i - 1,i), s2.substring(j - 1, j));
                     //情况3："_"和s2搭配
                     v3 = arrayTable[i][j - 1] + getTable("_" , s2.substring(j - 1, j));
                     arrayTable[i][j] = getMax(v1, v2, v3);
                     System.out.print(arrayTable[i][j]);
                 }
                 System.out.println();
             }
             File file=new File("G:\\学院\\理工\\2019.下\\算法课程设计\\源码\\ACTG_Array.txt"); //存放数组数据的文件
             FileWriter out = null;
			try {
				out = new FileWriter(file);
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}  //文件写入流
             //将数组中的数据写入到文件中。每行各数据之间TAB间隔
             for(int i=1;i<arrayTable.length;i++){
              for(int j=1;j<arrayTable[0].length;j++){
               try {
				out.write(arrayTable[i][j]+"\t");
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
              }
              out.write("\r\n");
             }
             out.close();            
    	}
    	 //获取变更后的s1和s2，回溯
    	 private void  getS() {
    		 Ns1="";
    		 Ns2="";
    		 int row=arrayTable.length-1;//行
    		 int cow=arrayTable[0].length-1;//列
    		 while (row != 0 || cow != 0)
             {
                 if (row == 0)//当行等于0时，Ns1已经匹配完成，Ns2前面的剩余基因与空格匹配
                 {
                     for (int i = 0; i < cow; i++)
                         Ns1 = "_" + Ns1;//匹配后的Ns1
                     Ns2 = s2.substring(0, cow) + Ns2;//匹配后的Ns2
                     return;
                 }
                 if (cow == 0)//列为Ns2 同行一样
                 {
                     for (int i = 0; i < row; i++)
                         Ns2 = "_" + Ns2;
                     Ns1 = s1.substring(0, row) + Ns1;
                     return;
                 }
                 int frist = arrayTable[row - 1][cow] +getTable(s1.substring(row - 1, row), "_");//s1的最后一个基因和空格匹配
                 int second = arrayTable[row][cow - 1] + getTable(s2.substring(cow - 1, cow), "_");//s2的最后一个基因和空格匹配
               //s1的最后一个基因和DNA最后一个基因匹配
                 int value = arrayTable[row][cow];
                 if (value == frist)
                 {
                     Ns1 = s1.substring(row - 1, row) + Ns1;
                     Ns2 = "_" + Ns2;
                     row = row - 1;
                 }
                 else if (value == second)
                 {
                     Ns1 = "_" + Ns1;
                     Ns2 = s2.substring(cow - 1, cow) + Ns2;
                     cow = cow - 1;
                 }
                 else
                 {
                     Ns1 = s1.substring(row - 1, row) + Ns1;
                     Ns2 = s2.substring(cow - 1, cow) + Ns2;
                     row = row - 1;
                     cow = cow - 1;
                 } 
    	 }   	    	 
    	 }
         //获取结果
         public int getResult() {
    	 int i=arrayTable.length-1;
    	 int j=arrayTable[0].length-1;
    	 return arrayTable[i][j];
     }    
        //获取最大值
        private int getMax(int a,int b,int c) {
    	 int max =a;
    	 max=b>max?b:max;
    	 max=c>max?c:max;
    	 return max;
     }	
}
